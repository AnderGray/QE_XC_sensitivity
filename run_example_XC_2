#!/bin/sh

# run from directory where this script is
cd `dirname $0`
EXAMPLE_DIR=`pwd`

# check whether echo has the -e option
if test "`echo -e`" = "-e" ; then ECHO=echo ; else ECHO="echo -e" ; fi

$ECHO
$ECHO "$EXAMPLE_DIR : starting"
$ECHO
$ECHO "This example shows how to use pw.x to calculate the total energy and"
$ECHO "the band structure of four simple systems: Si, Al, Cu, Ni."

# set the needed environment variables
. ../environment_variables

# PSEUDO_DIR=$PSEUDO_DIR/Si_pseudos

# required executables and pseudopotentials
BIN_LIST="pw.x bands.x"
# PSEUDO_LIST="Si.pbe-n-kjpaw_psl.1.0.0.UPF Si.pz-n-kjpaw_psl.1.0.0.UPF Si.pbe-n-rrkjus_psl.1.0.0.UPF Si.pz-n-rrkjus_psl.1.0.0.UPF"
PSEUDO_LIST="Si_LDA.UPF Si_PBE.UPF Si_PBEsol.UPF Si.pz-n-kjpaw_psl.1.0.0.UPF Si.pbe-n-kjpaw_psl.1.0.0.UPF"
# PSEUDO_LIST="Si_r.upf"

$ECHO
$ECHO "  executables directory: $BIN_DIR"
$ECHO "  pseudo directory:      $PSEUDO_DIR"
$ECHO "  temporary directory:   $TMP_DIR"
$ECHO "  checking that needed directories and files exist...\c"

# check for directories
for DIR in "$BIN_DIR" "$PSEUDO_DIR" ; do
    if test ! -d $DIR ; then
        $ECHO
        $ECHO "ERROR: $DIR not existent or not a directory"
        $ECHO "Aborting"
        exit 1
    fi
done
for DIR in "$TMP_DIR" "$EXAMPLE_DIR/results" ; do
    if test ! -d $DIR ; then
        mkdir $DIR
    fi
done
cd $EXAMPLE_DIR/results

# check for executables
for FILE in $BIN_LIST ; do
    if test ! -x $BIN_DIR/$FILE ; then
        $ECHO
        $ECHO "ERROR: $BIN_DIR/$FILE not existent or not executable"
        $ECHO "Aborting"
        exit 1
    fi
done

# check for pseudopotentials
for FILE in $PSEUDO_LIST ; do
    if test ! -r $PSEUDO_DIR/$FILE ; then
       $ECHO
       $ECHO "Downloading $FILE to $PSEUDO_DIR...\c"
            $WGET $PSEUDO_DIR/$FILE $NETWORK_PSEUDO/$FILE 2> /dev/null
    fi
    if test $? != 0; then
        $ECHO
        $ECHO "ERROR: $PSEUDO_DIR/$FILE not existent or not readable"
        $ECHO "Aborting"
        exit 1
    fi
done
$ECHO " done"

# how to run executables
PW_COMMAND="$PARA_PREFIX $BIN_DIR/pw.x $PARA_POSTFIX"
$ECHO
$ECHO "  running pw.x as: $PW_COMMAND"
$ECHO

BANDS_COMMAND="$PARA_PREFIX $BIN_DIR/bands.x $PARA_POSTFIX"
$ECHO
$ECHO "  running bands.x as: $BANDS_COMMAND"
$ECHO

# PSEDUOS=(pbe pz)
# PSEDUOS=(LDA PBEsol pz-n-kjpaw pbe-n-kjpaw)
# PSEDUOS=(LDA PBEsol b3lyp hse)
# PSEDUOS=(LDA PBE PBEsol MGGA_X_R2SCAN)
# PSEDUOS=(XC-001I-000I-003I-130L-000I-000I)
# PSEDUOS=(LDA PBE PBEsol BEEF-vdW)
PSEDUOS=(BEEF-vdW)

for XS in ${PSEDUOS[@]}; do

    # self-consistent calculation
    cat > si.scf.$XS.in << EOF
 &control
    calculation = 'scf'
    restart_mode='from_scratch',
    prefix='silicon',
    tstress = .true.
    tprnfor = .true.
    pseudo_dir = '$PSEUDO_DIR/',
    outdir='$TMP_DIR/'
 /
 &SYSTEM
  ibrav =  2,
  celldm(1) = 10.2076,
  nat =  2,
  ntyp = 1,
  ecutwfc = 50,
  ecutrho = 400,
  nbnd = 8,
  input_dft='$XS',
  ensemble_energies=.true.
!  lspinorb=.TRUE.,
!  occupations = 'smearing',
!  smearing = 'gaussian',
!  degauss = 0.005
/

&ELECTRONS
  conv_thr = 1e-8,
  mixing_beta = 0.6
/

ATOMIC_SPECIES
  Si 28.086 Si.pbe-n-kjpaw_psl.1.0.0.UPF

ATOMIC_POSITIONS (alat)
  Si 0.0 0.0 0.0
  Si 0.25 0.25 0.25

K_POINTS (automatic)
  8 8 8 0 0 0
EOF
    $ECHO "  running the scf calculation for Si with $XS...\c"
    $PW_COMMAND < si.scf.$XS.in > si.scf.$XS.out
    check_failure $?
    $ECHO " done"

    # band structure calculation along delta, sigma and lambda lines
    cat > si.band.$XS.in << EOF
 &control
    calculation='bands'
    pseudo_dir = '$PSEUDO_DIR/',
    outdir='$TMP_DIR/',
    prefix='silicon'
 /
 &system
  ibrav =  2,
  celldm(1) = 10.2076,
  nat =  2,
!  lspinorb=.TRUE.,
  ntyp = 1,
  ecutwfc = 50,
  ecutrho = 400,
  nbnd = 8
  input_dft='$XS',
  ensemble_energies=.true.
 /

&electrons
  conv_thr = 1e-8,
  mixing_beta = 0.6
 /

ATOMIC_SPECIES
  Si 28.086  Si.pbe-n-kjpaw_psl.1.0.0.UPF

ATOMIC_POSITIONS (alat)
  Si 0.00 0.00 0.00
  Si 0.25 0.25 0.25

K_POINTS {crystal_b}
5
  0.0000 0.5000 0.0000 20  !L
  0.0000 0.0000 0.0000 30  !G
  -0.500 0.0000 -0.500 10  !X
  -0.375 0.2500 -0.375 30  !U
  0.0000 0.0000 0.0000 20  !G
EOF
    $ECHO "  running the band-structure calculation for Si with $XS...\c"
    $PW_COMMAND < si.band.$XS.in > si.band.$XS.out
    check_failure $?
    $ECHO " done"

    # runs band.x for SI    
    cat > si.band.$XS.pp.in <<EOF
 &BANDS
    prefix = 'silicon'
    outdir='$TMP_DIR/',
    filband = 'si_bands.$XS.dat'
/   
EOF
    $ECHO "  running the band-structure calculation for Si with $XS...\c"
    $BANDS_COMMAND < si.band.$XS.pp.in > si.band.$XS.pp.out
    check_failure $?
    $ECHO " done"


    # clean TMP_DIR
    $ECHO "  cleaning $TMP_DIR...\c"
    rm -rf $TMP_DIR/silicon*
    $ECHO " done"


    $ECHO "  Making plot with python...\c"
    cat > si-bands-plot.$XS.py << EOF

import matplotlib.pyplot as plt
from matplotlib import rcParamsDefault
import numpy as np

plt.rcParams["figure.dpi"]=150
plt.rcParams["figure.facecolor"]="white"
plt.rcParams["figure.figsize"]=(8, 6)

# load data
data = np.loadtxt('si_bands.$XS.dat.gnu')

k = np.unique(data[:, 0])
# k = np.insert(k, 10, 1)
# k = np.insert(k, 21, 2.4142)
bands = np.reshape(data[:, 1], (-1, len(k)))

for band in range(len(bands)):
    plt.plot(k, bands[band, :], linewidth=1, alpha=0.5, color='k')
plt.xlim(min(k), max(k))

# Fermi energy
plt.axhline(6.6416, linestyle=(0, (5, 5)), linewidth=0.75, color='k', alpha=0.5)
# High symmetry k-points (check bands_pp.out)
plt.axvline(0.8660, linewidth=0.75, color='k', alpha=0.5)
plt.axvline(1.8660, linewidth=0.75, color='k', alpha=0.5)
plt.axvline(2.2196, linewidth=0.75, color='k', alpha=0.5)
# text labels
plt.xticks(ticks= [0, 0.8660, 1.8660, 2.2196, 3.2802], \
        labels=['L', '$\Gamma$', 'X', 'U', '$\Gamma$'])
plt.ylabel("Energy (eV)")
plt.text(2.3, 5.6, 'Fermi energy', fontsize= "small")
plt.savefig("si-bands.$XS.png")

EOF
    
source ~/.python_venv/ML/bin/activate
python3 si-bands-plot.$XS.py

done

cat > si-bands-plot-compare.py << EOF
import matplotlib.pyplot as plt
from matplotlib import rcParamsDefault
import numpy as np

plt.rcParams["figure.dpi"]=150
plt.rcParams["figure.facecolor"]="white"
plt.rcParams["figure.figsize"]=(8, 6)

colors=["k", "r", "g", "b"]

XC_s = "${PSEDUOS[@]}".split()

# load data
for (i,XS) in enumerate(XC_s):
    data = np.loadtxt(f"si_bands.{XS}.dat.gnu")

    k = np.unique(data[:, 0])
    # k = np.insert(k, 10, 1)
    # k = np.insert(k, 21, 2.4142)
    bands = np.reshape(data[:, 1], (-1, len(k)))

    for band in range(len(bands)):
        plt.plot(k, bands[band, :], linewidth=1, alpha=0.5, color=colors[i], label=XS)


plt.xlim(min(k), max(k))

# Fermi energy
plt.axhline(6.6416, linestyle=(0, (5, 5)), linewidth=0.75, color='k', alpha=0.5)
# High symmetry k-points (check bands_pp.out)
plt.axvline(0.8660, linewidth=0.75, color='k', alpha=0.5)
plt.axvline(1.8660, linewidth=0.75, color='k', alpha=0.5)
plt.axvline(2.2196, linewidth=0.75, color='k', alpha=0.5)
# text labels
plt.xticks(ticks= [0, 0.8660, 1.8660, 2.2196, 3.2802], \
        labels=['L', '$\Gamma$', 'X', 'U', '$\Gamma$'])
plt.ylabel("Energy (eV)")
plt.text(2.3, 5.6, 'Fermi energy', fontsize= "small")

handles, labels = plt.gca().get_legend_handles_labels()
by_label = dict(zip(labels, handles))
plt.legend(by_label.values(), by_label.keys())

plt.savefig("si-bands.png")

EOF
python3 si-bands-plot-compare.py

$ECHO
$ECHO "$EXAMPLE_DIR : done"
